name: Build Cpp Solutions

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    permissions:
      actions: write   # required for the GHA cache backend
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            compiler: g++
          - os: ubuntu-latest
            compiler: clang++
          - os: windows-latest
            compiler: cl
    env:
      GITCRYPT_KEY_B64: ${{ secrets.GITCRYPT_KEY_B64 }}
      SCCACHE_GHA_ENABLED: "true"   # persist cache across runs via GHA backend
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Install git-crypt
        if: runner.os != 'Windows'
        run: sudo apt-get update && sudo apt-get install -y git-crypt
      - name: Unlock encrypted inputs
        if: runner.os != 'Windows' && env.GITCRYPT_KEY_B64 != ''
        run: |
          echo "$GITCRYPT_KEY_B64" | base64 --decode > gitcrypt.key
          git-crypt unlock gitcrypt.key
      - name: Install g++-14
        if: matrix.compiler == 'g++'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-14
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
      - name: Install clang
        if: matrix.compiler == 'clang++'
        run: sudo apt-get update && sudo apt-get install -y clang
      - name: Enable compiler cache (ccache)
        if: matrix.compiler != 'cl'
        uses: hendrikmuhs/ccache-action@v1.2.14
        with:
          max-size: 2G
          # Symlink compilers so g++, clang++ automatically go through ccache
          create-symlink: true
      - name: Setup MSVC
        if: matrix.compiler == 'cl'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Enable sccache (MSVC)
        if: matrix.compiler == 'cl'
        uses: Mozilla-Actions/sccache-action@v0.0.9
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build (two-phase: compile then link) [MSVC]
        if: matrix.compiler == 'cl'
        shell: bash
        env:
          MSYS2_ARG_CONV_EXCL: '*'
        run: |
          set -e
          BDIR="build/${{ matrix.compiler }}"
          mkdir -p "$BDIR"
          mapfile -t SRCS < <(git ls-files '**/a.cpp' '**/b.cpp' 2>/dev/null || true)
          for src in "${SRCS[@]}"; do
            dir=$(dirname "$src")
            base=$(basename "$src" .cpp)
            out_dir="$BDIR/$dir"
            mkdir -p "$out_dir"
            # compile to .obj (cacheable)
            sccache cl /nologo /EHsc /std:c++latest /O2 /c "$src" /Fo"$out_dir/$base.obj"
            # link (fast)
            link /nologo /OUT:"$out_dir/$base.exe" "$out_dir/$base.obj"
          done
      - name: Show sccache stats
        if: matrix.compiler == 'cl'
        run: ${SCCACHE_PATH} --show-stats || sccache --show-stats || true
      - name: Check sccache backend
        if: matrix.compiler == 'cl'
        run: sccache --show-stats | findstr /R /C:"Cache location" || true
      - name: Compile all solutions
        if: matrix.compiler != 'cl'
        run: |
          set -e
          make clean
          make \
            CXX="ccache ${{ matrix.compiler }}" \
            BUILD_DIR="build/${{ matrix.compiler }}" \
            CXXFLAGS="-std=c++23 -Werror -O2 -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables" \
            DIRS="2023 2024" \
            -j"$(nproc)"
      - name: Show ccache stats
        if: matrix.compiler != 'cl'
        run: ccache -s || true
      - name: Upload g++ artifacts
        if: matrix.compiler == 'g++' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: gpp-build
          path: build/g++
      - name: Test outputs
        if: runner.os != 'Windows'
        env:
          COMPILER: ${{ matrix.compiler }}
        run: ./tests/run_solutions.sh

name: C++ Coverage (gcov/lcov)

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      GITCRYPT_KEY_B64:
        required: false
    outputs:
      coverage-generated:
        description: Whether a coverage artifact was produced.
        value: ${{ jobs.coverage.outputs.coverage-generated }}
  push:
    branches: [ main ]
  pull_request:

jobs:
  coverage:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      actions: write
    env:
      GITCRYPT_KEY_B64: ${{ secrets.GITCRYPT_KEY_B64 }}
      COVERAGE_COMPILER_LABEL: gcov
    outputs:
      coverage-generated: ${{ steps.coverage-metadata.outputs.coverage-generated }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Determine coverage prerequisites
        id: coverage-metadata
        run: |
          if [[ -z "${GITCRYPT_KEY_B64:-}" ]]; then
            echo "coverage-generated=false" >> "$GITHUB_OUTPUT"
            echo "::notice title=Coverage::Skipping coverage because GITCRYPT_KEY_B64 is not available."
          else
            echo "coverage-generated=true" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/checkout@v4
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'

      - name: Install dependencies
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y git-crypt g++-14 lcov
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100

      - name: Unlock encrypted inputs
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        run: |
          echo "$GITCRYPT_KEY_B64" | base64 --decode > gitcrypt.key
          git-crypt unlock gitcrypt.key

      - name: Compile solutions with coverage flags (2023 + 2024)
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        run: |
          set -euo pipefail
          cxx=$(command -v g++-14 || command -v g++)
          label="$COVERAGE_COMPILER_LABEL"
          make clean BUILD_DIR="build/$label"
          make \
            CXX="$cxx" \
            BUILD_DIR="build/$label" \
            CXXFLAGS="-std=c++23 -O0 -g --coverage" \
            DIRS="2023 2024" \
            -j"$(nproc)"

      - name: Run solution tests
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        env:
          COMPILER: ${{ env.COVERAGE_COMPILER_LABEL }}
        run: ./tests/run_solutions.sh

      - name: Run all covered binaries to generate .gcda
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        run: |
          set -euo pipefail
          REPO_ROOT="${GITHUB_WORKSPACE:-$PWD}"
          LABEL="${COVERAGE_COMPILER_LABEL:-g++}"
          chmod -R u+x "build/${LABEL}" || true

          # Execute each produced binary (a/b) from its source dir so relative I/O works
          while IFS= read -r -d '' exe; do
            rel="${exe#build/${LABEL}/}"
            src_dir="$(dirname "${rel}")"
            abs_exe="${REPO_ROOT}/${exe}"
            echo "::group::Run ${exe} (from ${src_dir})"
            if [[ -d "${src_dir}" ]]; then
              ( cd "${src_dir}" && timeout 10s "${abs_exe}" >/dev/null 2>/dev/null || true )
            else
              echo "WARN: Source dir ${src_dir} not found for ${exe}"
            fi
            echo "::endgroup::"
          done < <(find "build/${LABEL}" -type f \( -name a -o -name b \) -print0)

      - name: Show .gcda counts per year (debug)
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        run: |
          for year in 2023 2024; do
            echo -n "${year}: "
            find "build/${COVERAGE_COMPILER_LABEL}/${year}" -name '*.gcda' | wc -l | xargs echo "files"
          done

      - name: Generate lcov report
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        run: |
          set -euo pipefail
          mkdir -p coverage
          gcov_tool=$(command -v gcov-14 || command -v gcov)
          lcov --gcov-tool "$gcov_tool" \
               --capture --directory "build/$COVERAGE_COMPILER_LABEL" \
               --no-external --base-directory . \
               --rc branch_coverage=1 \
               --output-file coverage/lcov.info
          lcov --list coverage/lcov.info --rc branch_coverage=1

      - name: Generate HTML coverage summary
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        run: |
          set -euo pipefail
          genhtml --branch-coverage --demangle-cpp --legend \
                  --output-directory coverage/html \
                  coverage/lcov.info

      - name: Generate gcov reports (per-year tree; no XML)
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        run: |
          set -euo pipefail
          REPO_ROOT="${GITHUB_WORKSPACE:-$PWD}"
          gcov_bin=$(command -v gcov-14 || command -v gcov)
          label="${COVERAGE_COMPILER_LABEL}"
      
          # Detect year folders (20xx)
          YEARS=$(cd "$REPO_ROOT" && ls -d 20[0-9][0-9] 2>/dev/null | tr '\n' ' ')
          [[ -n "${YEARS}" ]] || YEARS="2023 2024"
      
          cd "$REPO_ROOT"
      
          # Run gcov from repo root; write .gcov files here, then reshape to year/month paths.
          while IFS= read -r -d '' src; do
            "$gcov_bin" -pb -s "$REPO_ROOT" \
              -o "${REPO_ROOT}/build/${label}/$(dirname "${src}")" \
              "${src}" >/dev/null
          done < <(find $YEARS -type f \( -name 'a.cpp' -o -name 'b.cpp' \) -print0)
      
          # Move files like '2024#01#a.cpp.gcov' into 'coverage/gcov/2024/01/a.cpp.gcov'
          mkdir -p coverage/gcov
          shopt -s nullglob
          for f in *.gcov; do
            path="${f//\#//}"
            mkdir -p "coverage/gcov/$(dirname "$path")"
            mv "$f" "coverage/gcov/$path"
          done
      
          # Quick sanity: list counts per detected year
          for y in $YEARS; do
            echo -n "$y: "
            find "coverage/gcov/$y" -type f -name '*.gcov' | wc -l | xargs echo "files"
          done
      

      - name: Upload coverage artifact (lcov + html + gcov by year)
        if: steps.coverage-metadata.outputs.coverage-generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lcov-report
          path: |
            coverage/lcov.info
            coverage/html
            coverage/gcov
          if-no-files-found: error

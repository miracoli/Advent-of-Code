name: Deploy static content to Pages

on:
  workflow_run:
    workflows:
      - "Build Cpp Solutions"
    types:
      - completed

permissions:
  actions: write
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  coverage:
    uses: ./.github/workflows/coverage.yml
    secrets: inherit

  deploy:
    needs: coverage
    env:
      GITCRYPT_KEY_B64: ${{ secrets.GITCRYPT_KEY_B64 }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      actions: read
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: List artifacts for triggering run (debug)
        uses: actions/github-script@v7
        with:
          script: |
            const runId = ${{ github.event.workflow_run.id }};
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
              per_page: 100,
            });
            core.info(`Artifacts on run ${runId}: ` + data.artifacts.map(a => `${a.name}(expired=${a.expired})`).join(", "));
      - name: Download g++ artifact
        uses: actions/download-artifact@v4
        with:
          name: gpp-build
          path: build/g++
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: List downloaded files (debug)
        run: |
          echo "Tree under build/g++:"
          find build/g++ -maxdepth 3 -type f -printf "%p\n" | sort || true
      - name: Verify expected binaries exist
        run: |
          set -euo pipefail
          test -d build/g++ || { echo "::error::Missing build/g++ after download"; exit 1; }
          ls -l build/g++/2024/01/a || { echo "::error::Missing example binary a"; exit 1; }
          ls -l build/g++/2024/01/b || { echo "::error::Missing example binary b"; exit 1; }
      - name: Download coverage artifact
        if: needs.coverage.outputs.coverage-generated == 'true'
        uses: actions/download-artifact@v4
        with:
          name: lcov-report
      - name: Install git-crypt
        run: sudo apt-get update && sudo apt-get install -y git-crypt
      - name: Unlock encrypted inputs
        if: env.GITCRYPT_KEY_B64 != ''
        run: |
          echo "$GITCRYPT_KEY_B64" | base64 --decode > gitcrypt.key
          git-crypt unlock gitcrypt.key
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y hyperfine jq
      - name: Generate index.html
        env:
          COVERAGE_GENERATED: ${{ needs.coverage.outputs.coverage-generated }}
        run: |
          mkdir -p site
          cat <<'EOF' > site/index.html
          <!DOCTYPE html><html><head><meta charset="UTF-8"><title>Advent of Code Solutions</title></head><body>
          EOF
          if [ "${COVERAGE_GENERATED}" = "true" ] && [ -d coverage ]; then
            {
              echo '<h2>Coverage Reports</h2>'
              if [ -d coverage/html ]; then
                echo '<p><a href="coverage/html/index.html">View coverage results</a></p>'
              elif [ -d coverage ]; then
                echo '<p><a href="coverage/">View coverage results</a></p>'
              fi
              echo '<ul>'
              if [ -f coverage/lcov.info ]; then
                echo '<li><a href="coverage/lcov.info">lcov.info</a></li>'
              fi
              if [ -d coverage/html ]; then
                echo '<li><a href="coverage/html/index.html">HTML coverage report</a></li>'
              fi
              if [ -d coverage/gcov ]; then
                echo '<li><a href="coverage/gcov/">gcov files</a></li>'
              fi
              echo '</ul>'
            } >> site/index.html
          fi
          mapfile -t years < <(find . -mindepth 1 -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]' -printf '%f\n' | sort)
          if [ ${#years[@]} -eq 0 ]; then
            echo '<p>No solution data available.</p>' >> site/index.html
          fi
          for year in "${years[@]}"; do
            {
              echo "<h2>${year}</h2>"
              echo '<table border="1">'
              echo '<tr><th>Day</th><th>a.cpp lines</th><th>b.cpp lines</th><th>a time (ms)</th><th>b time (ms)</th></tr>'
            } >> site/index.html
            a_times=()
            b_times=()
            for day in $(seq -w 1 25); do
              dir="${year}/$day"
              a_lines=""
              b_lines=""
              a_time=""
              b_time=""
              binary_a="build/g++/${dir}/a"
              binary_b="build/g++/${dir}/b"
              if [ -f "$dir/a.cpp" ]; then
                a_lines=$(wc -l < "$dir/a.cpp" | xargs)
                if [ -x "$binary_a" ]; then
                  hyperfine -N -u microsecond -w 50 -r 50 "cd \"$dir\" && ../$binary_a" --export-json /tmp/a.json > /dev/null
                  a_time_raw=$(jq '.results[0].min * 1000' /tmp/a.json)
                  a_time=$(printf "%.2f" "$a_time_raw")
                  a_times+=("$a_time_raw")
                fi
              fi
              if [ -f "$dir/b.cpp" ]; then
                b_lines=$(wc -l < "$dir/b.cpp" | xargs)
                if [ -x "$binary_b" ]; then
                  hyperfine -N -u microsecond -w 50 -r 50 "cd \"$dir\" && ../$binary_b" --export-json /tmp/b.json > /dev/null
                  b_time_raw=$(jq '.results[0].min * 1000' /tmp/b.json)
                  b_time=$(printf "%.2f" "$b_time_raw")
                  b_times+=("$b_time_raw")
                fi
              fi
              echo "<tr><td>$day</td><td>${a_lines}</td><td>${b_lines}</td><td>${a_time}</td><td>${b_time}</td></tr>" >> site/index.html
            done
            a_stats=$(python3 - "${a_times[@]}" <<'PY'
          import sys
          import statistics

          values = [float(x) for x in sys.argv[1:]]
          if not values:
              print("0.00 0.00 0.00 0.00 0.00")
          else:
              total = sum(values)
              minimum = min(values)
              maximum = max(values)
              average = total / len(values)
              median = statistics.median(values)
              print(f"{total:.2f} {minimum:.2f} {maximum:.2f} {average:.2f} {median:.2f}")
          PY
            )
            read -r a_sum a_min a_max a_avg a_median <<< "$a_stats"
            b_stats=$(python3 - "${b_times[@]}" <<'PY'
          import sys
          import statistics

          values = [float(x) for x in sys.argv[1:]]
          if not values:
              print("0.00 0.00 0.00 0.00 0.00")
          else:
              total = sum(values)
              minimum = min(values)
              maximum = max(values)
              average = total / len(values)
              median = statistics.median(values)
              print(f"{total:.2f} {minimum:.2f} {maximum:.2f} {average:.2f} {median:.2f}")
          PY
            )
            read -r b_sum b_min b_max b_avg b_median <<< "$b_stats"
            overall_sum=$(awk "BEGIN {print $a_sum + $b_sum}")
            overall_sum=$(printf "%.2f" "$overall_sum")
            {
              echo "<tr><td>Min</td><td></td><td></td><td>${a_min}</td><td>${b_min}</td></tr>"
              echo "<tr><td>Max</td><td></td><td></td><td>${a_max}</td><td>${b_max}</td></tr>"
              echo "<tr><td>Average</td><td></td><td></td><td>${a_avg}</td><td>${b_avg}</td></tr>"
              echo "<tr><td>Median</td><td></td><td></td><td>${a_median}</td><td>${b_median}</td></tr>"
              echo "<tr><td>Sum</td><td></td><td></td><td>${a_sum}</td><td>${b_sum}</td></tr>"
              echo "<tr><td>Overall</td><td></td><td></td><td colspan=\"2\">${overall_sum}</td></tr>"
              echo '</table>'
            } >> site/index.html
          done
          echo '</body></html>' >> site/index.html
      - name: Copy coverage assets into site
        if: needs.coverage.outputs.coverage-generated == 'true'
        run: |
          mkdir -p site/coverage
          if [ -f coverage/lcov.info ]; then
            cp coverage/lcov.info site/coverage/
          fi
          if [ -d coverage/html ]; then
            cp -r coverage/html site/coverage/html
          fi
          if [ -d coverage/gcov ]; then
            cp -r coverage/gcov site/coverage/gcov
          fi
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

